<!DOCTYPE html>
<html ng-app="qdb" ng-controller="AppCtrl">
    <head>
        <title>Sailng - Sails.js and Angular starter app / boilerplate</title>
        <base href="/">
        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <!--
        Stylesheets and Preprocessors
        ==============================
        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS). Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
        + Change the order of your CSS files
        + Import stylesheets from other directories
        + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->
        <!-- font awesome from BootstrapCDN -->
    <link href="http://netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.css" rel="stylesheet">
    <!-- <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet"> -->
    <link href="//maxcdn.bootstrapcdn.com/bootswatch/3.3.1/cosmo/bootstrap.min.css" rel="stylesheet">
        
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/bootstrap-multiselect.css">
        <link rel="stylesheet" href="/styles/bootstrap-treeview.min.css">
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/styles/mainmenu.css">
        <link rel="stylesheet" href="/styles/nv.d3.css">
        <link rel="stylesheet" href="/styles/trNgGrid.css">
        <!--STYLES END-->
    <link href="//www.fuelcdn.com/fuelux/3.5.0/css/fuelux.min.css" rel="stylesheet">

    </head>
<body>
    
  <body class="fuelux">
      
<%- body %>
<!--
Client-side Javascript
========================
You can always bring in JS files manually with `script` tags, or asynchronously
on the client using a solution like AMD (RequireJS). Or, if you like, you can
take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
By default, filesin your `assets/linker/js` folder are included here
automatically (between SCRIPTS and SCRIPTS END). Both JavaScript (.js) and
CoffeeScript (.coffee) are supported. In production, your scripts will be minified
and concatenated into a single file.
To customize any part of the built-in behavior, just edit your Gruntfile.
For example, here are a few things you could do:
+ Change the order of your scripts
+ Import scripts from other directories
+ Use a different preprocessor, like TypeScript
-->
      
    <script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
    <!-- <script src="http://jointjs.com/js/joint.js"></script> -->
    <script src="http://d3js.org/d3.v3.min.js"></script>

    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/js/bootstrap.min.js"></script>

<!--SCRIPTS-->
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-bootstrap/ui-bootstrap-tpls.js"></script>
<script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
<script src="/bower_components/sails.io.js/dist/sails.io.js"></script>
<script src="/bower_components/angularSails/dist/ngsails.io.js"></script>
<script src="/bower_components/lodash/lodash.js"></script>
<script src="/bower_components/moment/moment.js"></script>
<script src="/bower_components/angular-moment/angular-moment.js"></script>
<script src="/js/dependencies/amcharts.js"></script>
<script src="/js/dependencies/angularjs-dropdown-multiselect.min.js"></script>
<script src="/js/dependencies/bootstrap-multiselect.js"></script>
<script src="/js/dependencies/bootstrap-treeview.min.js"></script>
<script src="/js/dependencies/mainmenu.js"></script>
<script src="/js/dependencies/nv.d3.min.js"></script>
<script src="/js/dependencies/serial.js"></script>
<script src="/js/dependencies/trNgGrid.js"></script>
<script src="/src/app/about/index.js"></script>
<script src="/src/app/analysis/analysis.js"></script>
<script src="/src/app/app.js"></script>
<script src="/src/app/diagram/diagram.js"></script>
<script src="/src/app/goals/goals.js"></script>
<script src="/src/app/header/index.js"></script>
<script src="/src/app/home/index.js"></script>
<script src="/src/app/joblist/joblist.js"></script>
<script src="/src/app/organization/organization.js"></script>
<script src="/src/app/toplist/toplist.js"></script>
<script src="/src/common/models/diagramsRest.js"></script>
<script src="/src/common/models/index.js"></script>
<script src="/src/common/models/joblist.js"></script>
<script src="/src/common/models/message.js"></script>
<script src="/src/common/models/user.js"></script>
<script src="/src/common/services/config.js"></script>
<script src="/src/common/services/index.js"></script>
<script src="/src/common/services/lodash.js"></script>
<script src="/src/common/services/title.js"></script>
<script src="/src/common/services/utils.js"></script>
<!--SCRIPTS END-->
      
    <script src="//www.fuelcdn.com/fuelux/3.5.0/js/fuelux.min.js"></script>
    
<!--
Client-side Templates
========================
HTML templates are important prerequisites of modern, rich client applications.
To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
that you load these templates client-side.
By default, your Gruntfile is configured to automatically load and precompile
client-side JST templates in your `assets/linker/templates` folder, then
include them here automatically (between TEMPLATES and TEMPLATES END).
To customize this behavior to fit your needs, just edit your Gruntfile.
For example, here are a few things you could do:
+ Import templates from other directories
+ Use a different template engine (handlebars, jade, dust, etc.)
+ Internationalize your client-side templates using a server-side
stringfile before they're served.
-->
<!--TEMPLATES-->
<script type="text/javascript" src="/templates.js"></script>
<!--TEMPLATES END-->
</body>
</html>